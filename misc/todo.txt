-- MORE OF A JOURNAL THAN A TODO AT THIS POINT --

Day 0:
Hour 1:
- Project Setup:
- Github. X
- Windows Entry Point. X
- Create a Window. X
- Setup a basic msg pump. X
- Write pixels to the window.
- Allocate a buffer and display it to the window through StretchDIBits. X
- Some Basic Rendering Functions:
- Clear Buffer. X
- Render Rectangle.

- Capture Windows Input.

Tangental TODOS (TT: These todos have nothing to do with the project, but
to save time we can do these after our 1 hour session!)

- Check emacs mark set bug. (Maybe fixed ? See cua-mode in init.el)

Summary: Almost got done with the rendering functions, wasnt able to start input capturing, for next time!
-------------------------------

Day 1:
Hour 2:
- Clear Buffer check (memset). X
- Render Rectangle Call. X
- Capture Windows Input (Mouse location for now).
- Camera Concept.
- World Map Concept.

TT:
- Clock to only do avoid craming my CPU with drawcalls.
- Flip Y.
- Resize Window (do this later)
-------------------------------

Day 2:
Hour 3:
- Capture Windows Input (Mouse location for now). X
- Clock, to set constant frame rate. X
    - More testing needed though.
- Camera Concept.
- World Map Concept.

 Summary: Didn't take the time to evaluate if I was going to be able
to finish these tasks within an hour (which I didn't).. maybe thats ok
?
-------------------------------

Day 3:
Hour 4:
- Mouse Input.
- BUG: Rect Clipping to early in y.

Summary: Got stuck trying to map the back buffer to the client rect in
windows, also have a bug where y is flipped and the draw rectangle
call clips too early on y.
-------------------------------
Day 4:
Hour 5:
- FIX: Flip Y. X
- FIX: Rect Clipping to early in y. X
(- Reason about where to go next.)
- Memory Management. X
- World Concept. X
- Clickable Tiles. X
- Camera Concept.
    - Make all rendering relative to this position. <- Continue from here!

TT: Sub pixel movement (i.e floating point instead of integer positioning).

Summary: Somehow I was able to blast today, done with the above 15
minutes before. Also before starting today I felt a bit exhausted
since I had coded for 4 hours before. But after taking a break and
sticking to the 'I will code for 1 hour today no matter how bad it is'
I was able to hack around a lot which was great!

-------------------------------
Day 5:
Hour 6:
- Continue to make tiles relative to camera. X
- Player Concept
    - Player Movement, WASD start pathfinding with mouse click later ? Snap to grid ?
        - Concept of moving 'onto tile', get rid of relative floating point positions. X
        - Collision Detection. -> Need objects to collide with, world/map generation needed.
        - Other Entities to collide with, generate a map.

- Entities and World Generation:
    - 'Area' Concept that has
         -tiles
         -entities.
         Areas are relative to each other and entities can move between them.
    
Summary: Next time continue with world generation and entity assignment, collision and movement.
-------------------------------

Day 6:
Hour 7:
- Final (mandatory) hour of the week:
- World Generation.
    - Continue here next hour.
- Simple collision detection.

More:
- Weekly cleanup,
    - Consolidate 'camera transformations' so we don't have to do them all over.
    - Remove concept of pixelSpace and introduce another metric, e.g meters.
    - Math Util Functions (rect, v2/v4).
    

Summary: Thinking about world generation took longer than expected. I have an idea of how I want
tiles to be group so that a new 'group' of tiles can be generated when the player moves around,
while keeping the amount of tiles being considered low (for pathfinding in the future). Not sure
if this 'solution' is correct but the goal with this project is to experiement and try what I think
might be correct instead of trying to analyze for too long.
-------------------------------

Day 7:
Hour 8:
 World Generation Continuation:
 - If we make sure that Tile X, Tile Y and Tile Z is within bounds of 255 we can generate an id
 based on bitshifting up those locations into an u32 that will be unique! That means we have a strict
 upper bound of the amount of tiles we can have in X and Y and we also have a strict upper bound
 on the amount of Z layers we are allowed to have!
- Generate an area with containment 'walls'.

Summary: This problem, or maybe my solution, was harder then I thought.. didn't get very far today.
-------------------------------
Day 8:
Hour 9:
- Collision with Blocked tiles. X (Very simple)
- Continue with world generation, creating door ways. X
- Grab areas surronding the player.


Summary: I think my World Generation and Area creation started off too complicated, spent the hour thinking about the actual functionality of it and rewrote it.
-------------------------------

Day 8:
Hour 10:
- Dealing with some bugs from previous hour!
    - Things are getting pretty unwieldly to do with the new area scheme, calulating correct positioning on the screen would benefit from being abstracted away..
- Future TODO:
    - Entity Concept and getting enemies we can fight, chests we can open, stairs and doors we can enter etc..
        - Tile concept feels a bit overkill, probably only need to have entities per area instead of tiles we can occupy etc.
    - Some UI to allow the player to understand what it can interact with.
    - Continue with the GenerateArea code, making the world generation more intresting.
- Start with entity concept, creating an enemy we can fight.
    - Rewrite the player position logic code into entity position logic. X
    - Introduce RNG for generation. X
    - Start simple, only 'simulate' entities whenever we are in their area. Area's could have a daisy chain of pointers to entities that are within them.
        - Continue here, use health and find a way to let the entities fight each other'
            - Also we have some sort of wall bug.
Summary: Was nice to get another hour in, felt like I was able to play around with the current state of the game more.
-------------------------------

Day 9:
Hour 11:
    - Start clearing out the bug.
        - 'Openings' disapear from walls. X
    - Implement health and draw it. X
    - Spawn player on S.
        - Abstract input into UnitController, holds index of which entity it controls in the global entity array.
    - FIX: Camera Area Movement (Should try to abstract position logic with entities and camera).
    - FIX: Camera Area Grid a bit busted :D
    - When the current player touches another entity, deal a little damage to it.
    
    - When entity reaches 0 health return it to the entity pool.
TT:
    - If we get time we should rework our naming scheme, only variables are lower case, functions and structs/classes are UpperCaseAndCamelCase.
    - How should our combat work ?
    - Do we still need Tiles ? Remove and make the 'blocked tiles' into entities with collision ?
    - Abstract positioning with rel and area location so we can give it to entities and cameras instead of having to calculate those all over.

-------------------------------

Day 9:
Hour 12:
    - Continue on Camera Grid Fetching.
        
    - BUG: Continous Entity Spawning in first Area ?? X
        - Stupid me bound S to movement and spawning.
    - Implement entity 'targeting' and make a fireball that we can shoot at our target!
-------------------------------

Day 10:
Skipping today, doctors appointment and studying for exam. Exam on Saturday might skip tomorrow aswell!
-------------------------------
